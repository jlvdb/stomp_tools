#!/usr/bin/env python3
import argparse
import multiprocessing
import os
from hashlib import md5
from multiprocessing import cpu_count

import astropandas as apd
import numpy as np
import pandas as pd
import stomp

from stomp_tools import generate_randoms


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Generate a uniform random point catalogue on the '
                    'geometry of a STOMP map. Random points will have right '
                    'ascension / declination. Additional properties can be '
                    'cloned from columns of an input data table.')
    parser.add_argument(
        '-s', '--stomp-map', required=True,
        help='file path of a STOMP map that the defines the RA/DEC geometry')
    parser.add_argument(
        '-n', type=int, default=100000,
        help='number of randoms to generate (default: %(default)s)')
    parser.add_argument(
        '--n-from-table', required=False,
        help='file path to FITS data table which will be used to generate '
             '--factor time data objects and optinally for cloning additional '
             'data properties. Will overwrite -n')
    parser.add_argument(
        '--factor', type=float, default=10,
        help='multiple of data objects (in --n-from-table) to generate as '
             'random points (default: %(default)s, used only with '
             '--n-from-table, otherwise -n)')
    parser.add_argument(
        '--clone-column', nargs='*', required=False,
        help='column name(s) of properties to randomly clone from data '
             'objects from data table given by --n-from-table')
    parser.add_argument(
        '-o', '--output', required=True,
        help='file path of output randoms table')
    parser.add_argument(
        '--o-format', default="fits",
        help='astropy.table format specifier of the output table '
             '(default: %(default)s)')
    parser.add_argument(
        '--seed', default='KV450',
        help='string to seed the random generator, however the results still '
             'depend on --treads if it is > 1 (default: %(default)s)')
    parser.add_argument(
        '--threads', type=int, default=1,
        help='number of threads to use (default: %(default)s)')
    args = parser.parse_args()

    # normalize the number of threads
    setattr(args, "threads", min(max(args.threads, 1), cpu_count()))

    map_path = args.stomp_map
    # check input files
    if not os.path.exists(map_path):
        raise OSError("Input file not found: " + map_path)
    print("selecting input map: {:}".format(map_path))

    clonedata = None
    # check if the cloning table exists
    if args.n_from_table is not None:
        if not os.path.exists(args.n_from_table):
            raise OSError("Input file not found: " + args.n_from_table)
        print("loading data for cloning: {:}".format(args.n_from_table))
        clonedata = apd.read_auto(args.n_from_table, cols=args.clone_column)
        N = len(clonedata)
        # draw n = factor * len(table) objects
        setattr(args, "n", int(N * args.factor))

    # seed for the random state -> reproducible results
    hasher = md5(bytes(args.seed, "utf-8"))
    hashval = bytes(hasher.hexdigest(), "utf-8")
    seed = np.frombuffer(hashval, dtype=np.uint32)

    # for each thread load an instance of the STOMP map and a data chunk
    # STOMP masks cannot be pickled therefore not be shared between threads
    message = "generating %d randoms on map footprint" % args.n
    if args.threads == 1:
        print(message)
        table = generate_randoms(map_path, args.n, int(seed[0]))
    else:  # use a multiprocessing pool for the random generation
        print(message + " using %d threads" % args.threads)
        # split the number of randoms to generate into roughly equal chunks
        randoms_per_thread = np.diff(
            np.linspace(0, args.n, args.threads + 1, dtype=int))
        # launch a multiprocessing pool
        thread_args = [
            [map_path] * args.threads,
            randoms_per_thread,
            [int(np.uint32(seed[0] + i)) for i in range(args.threads)]]
        with multiprocessing.Pool(args.threads) as pool:
            tables = pool.starmap(generate_randoms, zip(*thread_args))
        # join the pandas.DataFrames
        table = pd.concat(tables)
        table.reset_index(inplace=True, drop=True)

    # optionally clone the values of the data column
    if clonedata is not None:
        clones = clonedata.sample(
            n=len(table), replace=True,
            random_state=np.random.RandomState(seed))
        clones.reset_index(inplace=True, drop=True)
        table = pd.concat([table.reset_index(), clones], axis=1)

    # write to specified output path
    print("write table to: %s" % args.output)
    apd.to_auto(table, args.output, ext="." + args.o_format)
