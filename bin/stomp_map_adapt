#!/usr/bin/env python3
import argparse
import multiprocessing
import os
import subprocess
import sys
from multiprocessing import cpu_count

import astropandas as apd
import numpy as np
import stomp

from stomp_tools import adapt_mask


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Create a STOMP pixel map from the object distribution in '
                    'a FITS data table. This is a faster version of '
                    'the_wizz/utility_programs/stomp_adapt_map.py')
    parser.add_argument(
        '-i', '--input', required=True, help='file path of input data table')
    parser.add_argument(
        '--ra', default='ALPHA_J2000',
        help='name of the table column containing the right ascension '
             '(default: %(default)s)')
    parser.add_argument(
        '--dec', default='DELTA_J2000',
        help='name of the table column containing the declination '
             '(default: %(default)s)')
    parser.add_argument(
        '-r', '--resolution', type=int, default=512,
        help='angular resolution of the polygon map, must be a power of base '
             '2 between 2 and 32768 (default: %(default)s)')
    parser.add_argument(
        '-o', '--output', required=True, help='file path of output map')
    args = parser.parse_args()

    # load the input data
    if not os.path.exists(args.input):
        sys.exit("ERROR: data table does not exist: %s" % args.input)
    data = apd.read_auto(args.input)
    # check if the RA/DEC columns exist
    if args.ra not in data.columns:
        sys.exit("ERROR: table does not contain column '%s'" % args.ra)
    if args.dec not in data.columns:
        sys.exit("ERROR: table does not contain column '%s'" % args.dec)

    ra_min = data[args.ra].min()
    ra_max = data[args.ra].max()
    dec_min = data[args.dec].min()
    dec_max = data[args.dec].max()
    # this may be useful for checks
    latlon_bound = stomp.LatLonBound(
        np.double(dec_min), np.double(dec_max),
        np.double(ra_min), np.double(ra_max),
        stomp.AngularCoordinate.Equatorial)
    box_area = latlon_bound.Area()
    print("data bounding box area: %.8f sqdeg" % box_area)

    print("creating STOMP map")
    mask = adapt_mask(data[args.ra], data[args.dec], args.resolution)
    # print some statistics
    mask_area = mask.Area()
    print("final map area: %.8f sqdeg" % mask_area)
    print("ratio to bounding box: %.8f" % (mask_area / box_area))
    print("density: %.8f objects per pixel" % (len(data) / mask.Size()))

    # write the output map
    mask.Write(args.output)
